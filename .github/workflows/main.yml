name: Deploy from DockerHub
on: push
jobs:
  building:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repository code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run compile

      - name: Install pm2
        run: npm install pm2@latest -g

      - name: Start pm2
        run: pm2 start

      - name: Status of pm2
        run: pm2 status

      - name: Stop pm2 app
        run: pm2 stop index

      - name: Delete pm2 app
        run: pm2 delete index

  pushing_to_docker_hub:
    runs-on: ubuntu-latest
    needs: building
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # образы докер можно публиковать в реестре (например в DockerHub или GitHub Packages)
      - name: Publish to GitHub Packages
        uses: docker/build-push-action@v4
        with:
          context: . # определяет контекст сборки как набор файлов по этому пути
          push: true # при успешной сборке отправляет в реестр
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/images-convertor-ci-cd:latest

  deploying:
    runs-on: ubuntu-latest
    needs: [pushing_to_docker_hub]
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          # IP
          host: ${{ secrets.VPS_SSH_HOST }}
          # username
          username: ${{ secrets.VPS_SSH_USERNAME }}
          # private SSH key
          key: ${{ secrets.VPS_SSH_SECRET }}
          # SSH port
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            echo "Pull new image"
            docker-compose -f /home/${{ secrets.VPS_SSH_USERNAME }}/images-convertor-ci-cd/docker-compose.yml pull
            echo "Restart the container"
            docker-compose -f /home/${{ secrets.VPS_SSH_USERNAME }}/images-convertor-ci-cd/docker-compose.yml up --force-recreate --build --no-deps -d
            echo "Delete old image"
            docker image prune -f
